@inject NavigationManager Nav
@inject AppShellContext AppShell

<button class="navmenu-burger"
        @onclick="() => IsOpen = true"
        aria-label="Open menu"
        style="@(IsOpen ? "display:none;" : "")">
    <i class="fas fa-bars"></i>
</button>

@if (IsOpen)
{
    <div class="navmenu-overlay" @onclick="HandleOverlayClick">
        <nav class="navmenu-panel open" @onclick:stopPropagation>
            <div class="navmenu-header">
                <div class="navmenu-header-user">
                    <div class="navmenu-avatar-placeholder">
                        <i class="fas fa-user"></i>
                    </div>
                    @if (AppShell.IsUserLoggedIn && AppShell.CurrentUser != null)
                    {
                        <span class="navmenu-username">Hi, @AppShell.CurrentUser.Username</span>
                    }
                    else
                    {
                        <span class="navmenu-brand">Bruhmazon</span>
                    }
                </div>
                <button class="navmenu-close" @onclick="() => IsOpen = false" aria-label="Close menu">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <ul class="navmenu-list">
               
                @if (AppShell.IsUserLoggedIn)
                {
                    <li>
                        <a class="navmenu-link @(IsActive(""))" href="" @onclick='() => NavigateAndClose("")'>
                            <span class="navmenu-icon"><i class="fa fa-home"></i></span>
                            Home
                        </a>
                    </li>
                    <li>
                        <a class="navmenu-link @(IsActive("favourites"))" href="favourites" @onclick='() => NavigateAndClose("favourites")'>
                            <span class="navmenu-icon"><i class="fa fa-heart"></i></span>
                            Favourites
                        </a>
                    </li>
                    <li>
                        <button class="navmenu-link navmenu-logout-btn" @onclick="Logout" type="button">
                            <span class="navmenu-icon"><i class="fas fa-sign-out-alt"></i></span>
                            Logout
                        </button>
                    </li>
                }
                else
                {
                    <li>
                        <a class="navmenu-link @(IsActive("register"))" href="register" @onclick='() => NavigateAndClose("register")'>
                            <span class="navmenu-icon"><i class="fa fa-list"></i></span>
                            Register
                        </a>
                    </li>
                    <li>
                        <a class="navmenu-link @(IsActive("login"))" href="login" @onclick='() => NavigateAndClose("login")'>
                            <span class="navmenu-icon"><i class="fa fa-sign-in-alt"></i></span>
                            Login
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
}

@code {
    private bool IsOpen { get; set; }

    protected override void OnInitialized()
    {
        AppShell.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppShell.OnChange -= StateHasChanged;
    }

    public async Task Logout()
    {
        AppShell.ClearSessionUser();
        AppShell.CurrentUser = null;
        AppShell.IsUserLoggedIn = false;
        await InvokeAsync(StateHasChanged);
        Nav.NavigateTo($"/login");
        IsOpen = false;
    }

    private void HandleOverlayClick()
    {
        IsOpen = false;
    }

    private string IsActive(string path)
    {
        var uri = Nav.ToBaseRelativePath(Nav.Uri).TrimEnd('/');
        return uri == path ? "active" : "";
    }

    private void NavigateAndClose(string path)
    {
        IsOpen = false;
        if (string.IsNullOrEmpty(path))
            Nav.NavigateTo("/");
        else
            Nav.NavigateTo(path);
    }
}